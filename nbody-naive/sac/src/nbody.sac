use Array: all except {zero, sel};
import Array: {zero, sel};
use Math: all;
use StdIO: all;
use Benchmarking: all;

#define EPSILON2 0x1p-53

struct Body {
  double x;
  double y;
  double z;
};

inline
double l2norm(struct Body b)
{
    return sqrt(b.x * b.x + b.y * b.y + b.z * b.z);
}

inline
double pow3(double x)
{
  return x * x * x;
}

inline
struct Body sub(struct Body a, struct Body b)
{
  res = Body {a.x - b.x, a.y - b.y, a.z - b.z};
  return res;
}

inline
struct Body add(struct Body a, struct Body b)
{
  res = Body {a.x + b.x, a.y + b.y, a.z + b.z};
  return res;
}

inline
struct Body mul(double n, struct Body b)
{
  res = Body {n * b.x, n * b.y, n * b.z};
  return res;
}

inline
struct Body acc(struct Body b1, struct Body b2,
                           double m)
{
   dir = sub(b2, b1);
   factor = m / pow3(l2norm(dir) + EPSILON2);
   return mul(factor, dir);
}

noinline
struct Body[N]
acc_v(struct Body[N] px, double[N] ms)
{
  return with {(. <= iv <= .): with {
                              ([0] <= jv < [N]): acc(px[iv], px[jv], ms[jv]);
                               }: fold(add, Body {0d, 0d, 0d});
              }: genarray([N], zero(Body {0d, 0d, 0d}));
}

inline
struct Body[N], struct Body[N]
advance(struct Body[N] positions, struct Body[N] velocities, double[N] masses,
        double dt)
{
  acc = acc_v(positions, masses);

  velocities = with {
                  (. <= iv <= .): add(velocities[iv], 
                                      mul(dt, acc[iv]));
               }: genarray([N], zero(Body {0d, 0d, 0d}));

  positions =  with {
                  (. <= iv <= .): add(positions[iv], 
                                      mul(dt, velocities[iv]));
               }: genarray([N], zero(Body {0d, 0d, 0d}));


  return (positions, velocities);
}

int main()
{
    itime = getInterval("time", 1);
    start(itime);

    velocities = with {}: genarray([N], zero(Body {0d, 0d, 0d}));
    positions = with {
                  (. <= [i] <= .): Body {tod(i), tod(2 * i), tod(3 * i)};
               }: genarray([N], zero(Body {0d, 0d, 0d}));
    masses = {[i] -> 1d | [i] < [N]};

    for (t = 0; t < ITER; t++) {
      positions, velocities = advance(positions, velocities, masses, 0.01);
    }

    end(itime);

    fprintf(stderr, "Sum is %lf\n", positions[0].x);

    time, unit = returnResultUnit(itime);
    fprintf(stderr, "This took %f%s.\n", time, unit);
    printf("%f\n", 
        (19.0 * tod(N) * tod(N) + 12.0 * tod(N)) * tod(ITER) / 1e9 / time);

    return 0;
}
