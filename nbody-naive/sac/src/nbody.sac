use Array: all except {sel, +, -, *, sum};
import Array: {sel, +, -, *, sum};
use Vect3D: all except {sel,+,-,*,sum,l2norm};
import Vect3D: {sel,+,-,*,sum,l2norm};

use Math: all;
use StdIO: all;
use Benchmarking: all;
use CommandLine: all;
use String: {strcmp};

#define EPSILON2 0x1p-53

struct Body {
   struct Vect3D  pos;
   struct Vect3D  vel;
   double mass;
};

inline
double pow3(double x)
{
  return x * x * x;
}


// nbody stuff:


inline
struct Vect3D acc (struct Body b, struct Body b2)
{
   dir = b2.pos - b.pos;
   return dir * ( b2.mass /  pow3 (EPSILON2 + l2norm (dir)) );
}

inline
struct Body[n] timeStep (struct Body[n] bs, double dt)
{
   /* Insert pragma because the default number of threads per block is 1024,
    * which is too much for small n. */
   acc = with {
           ([0] <= [i] < [n])
           #pragma gpukernel GridBlock(1, SplitLast(64, CompressGrid([1], ShiftLB(Gen))))
           : with {
                   ([0] <= [j] < [n]) : acc (_sel_VxA_([i], bs), 
                                             _sel_VxA_([j], bs)); 
                  } : fold (+, Vect3D { });
         }: genarray([n], Vect3D {});

   bs.vel += acc * dt;
   bs.pos += bs.vel * dt;

   return bs;
}

int main()
{
    off = ((argc() > 1) && (strcmp(argv(1), "-mt") == 0)) ? 2 : 0;
    N = String::toi(argv(off + 1));
    ITER = String::toi(argv(off + 2));
    itime = getInterval("time", 1);
    start(itime);

    bodies = with {
               (. <= [i] <= .) : Body {.pos = Vect3D {tod(i), tod(2 * i), tod(3 * i)},
                                       .vel = Vect3D {0d,0d,0d},
                                       .mass = 1d};
             } : genarray ([N], Body {});

    for (t = 0; t < ITER; t++) {
      bodies = timeStep (bodies, 0.01);
    }

    end(itime);

    fprintf(stderr, "First coordinate of first body is %lf\n", _sel_VxA_([0], bodies).pos.x);

    time, unit = returnResultUnit(itime);
    fprintf(stderr, "This took %f%s.\n", time, unit);
    printf("%f\n",
        (19.0 * tod(N) * tod(N) + 12.0 * tod(N)) * tod(ITER) / 1e9 / time);

    return 0;
}
