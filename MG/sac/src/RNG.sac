module RNG;
export {LCG, LCG_direct, LCG_skip};

use Array: all;
use StdIO: all;
//use RandLC: all;

ulong pow(ulong a, int b)
{
  return prod(genarray([b], a));
}

double, ulong LCG(ulong previous)
{
  /* We precompute the constants as the pow is not evaluated at compile time. */
//  next = (pow(5ul, 13) * previous) % pow(2ul, 46);
//  return (tod(next) * Math::pow(2d, -46d), next);
  next = 1220703125ul * previous % 70368744177664ul;
  return (tod(next) * 0x1p-46, next);
}

/* Directly calculates the kth number of LCG
     x_{k + 1} = 5^13 * x_k mod 2^{46}
   and multiplies it by 2^{-46}. Time complexity: O(log k).
   I assume ulong is a 64-bit unsigned integer satisfying the arithmetic of
   the C standard! */
ulong LCG_skip(ulong seed, int k)
{
  a = 1220703125ul;
//  a = pow(5ul, 13);

  b = seed;
  t = a;

  /* Multiplication of ulong is done mod 2^64 and (a mod 2^64) mod 2^46 =
     a mod 2^46, so we do not need the NPB hacks. */
  while (k != 0) {
    if (k % 2 == 1) {
//      b = (b * t) % pow(2ul, 46);
      b = (b * t) % 70368744177664ul;
    }
//    t = (t * t) % pow(2ul, 46);
    t = (t * t) % 70368744177664ul;
    k /= 2;
  }

  return b;
}

/* Convert to double in [0, 1[. */
double LCG_direct(ulong seed, int k)
{
  b = LCG_skip(seed, k);

  /* Conversion of b is exact as IEEE754 has 52 bits of mantissa. */
  return tod(b) * 0x1p-46;
}
