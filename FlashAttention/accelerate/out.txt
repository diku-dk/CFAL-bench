OriginalAcc:

\(T3 a0 a1 a2) -> let T1 a3 = let T2 a3 a4 = let T3 a3 a4 a5 = let a3 = a2 a4 = unit 0 T2 a5 a6 = let T3 a5 a6 a7 = let a5 = a0 a6 = a1 a7 = a6 a8 = a5 in T3 (generate (let () = () in T2 a8 ! () a7 ! ()) (\(T2 x0 x1) -> 1.0)) (generate (let () = () in T2 a8 ! () a7 ! ()) (\(T2 x0 x1) -> 1.0)) (generate (let () = () in T2 a8 ! () a7 ! ()) (\(T2 x0 x1) -> 1.0)) in T2 a5 a6 a7 = a5 a8 = let a8 = let a8 = let a8 = a6 in generate shape a8 (\(T2 x0 x1) -> (a8 ! (T2 x0 x1))) in backpermute (let T2 x0 x1 = (shape a7) ; x2 = x1 in (let () = () ; x3 = let x3 = 4 * x2 in div ((a3 ! ()) + x3 - 1) x3 in T2 (div x0 x3) x3, x2)) (\(T3 x0 x1 x2) -> fromIndex shape a8 (toIndex (let T2 x3 x4 = (shape a7) ; x5 = x4 in (let () = () ; x6 = let x6 = 4 * x5 in div ((a3 ! ()) + x6 - 1) x6 in T2 (div x3 x6) x6, x5)) (T3 x0 x1 x2))) a8 in generate shape a8 (\(T3 x0 x1 x2) -> (a8 ! (T3 x0 x1 x2))) a9 = generate (let T2 x0 x1 = (shape a7) ; x2 = x1 in (let () = () ; x3 = min (let x3 = 4 * x2 in div ((a3 ! ()) + x3 - 1) x3) x2 in T2 (div x0 x3) x3, x2)) (\(T3 x0 x1 x2) -> 0.0) a10 = generate (let () = () ; T2 x0 x1 = (shape a7) ; x2 = let x2 = x1 in min (let x3 = 4 * x2 in div ((a3 ! ()) + x3 - 1) x3) x2 in T2 (div x0 x2) x2) (\(T2 x0 x1) -> -3.4028235e38) a11 = generate (let () = () ; T2 x0 x1 = (shape a7) ; x2 = let x2 = x1 in min (let x3 = 4 * x2 in div ((a3 ! ()) + x3 - 1) x3) x2 in T2 (div x0 x2) x2) (\(T2 x0 x1) -> 0.0) a12 = a11 a13 = a9 a14 = a10 a15 = a14 T3 a16 a17 a18 = let a16 = fold1 (\x0 x1 -> x0 + x1) (let a16 = let a16 = let a16 = let a16 = generate shape a7 (\(T2 x0 x1) -> (a7 ! (T2 x0 x1))) in backpermute (let T2 x0 x1 = (shape a7) ; x2 = x1 in (let () = () ; x3 = min (let x3 = 4 * x2 in div ((a3 ! ()) + x3 - 1) x3) x2 in T2 (div x0 x3) x3, x2)) (\(T3 x0 x1 x2) -> fromIndex shape a16 (toIndex (let T2 x3 x4 = (shape a7) ; x5 = x4 in (let () = () ; x6 = min (let x6 = 4 * x5 in div ((a3 ! ()) + x6 - 1) x6) x5 in T2 (div x3 x6) x6, x5)) (T3 x0 x1 x2))) a16 in generate shape a16 (\(T3 x0 x1 x2) -> (a16 ! (T3 x0 x1 x2))) a17 = let a17 = replicate (let () = () in T3 (let T1 x0 = let T2 x0 x1 = let T3 x0 x1 x2 = (shape a8) in T2 x0 x1 in T1 x0 in x0) () ()) (slice (let () = () in T3 a4 ! () () ()) a8) in backpermute (let T3 x0 x1 x2 = (shape a17) ; T2 x3 x4 = T2 x0 x1 in T3 x3 x2 x4) (\(T3 x0 x1 x2) -> let T2 x3 x4 = T2 x0 x1 in T3 x3 x2 x4) a17 in zipWith (\x0 x1 -> x0 * x1) (replicate (let () = () in T3 () () (), let T3 x0 x1 x2 = (shape a17) in x2) a16) (replicate (let () = () in T4 () (let T2 x0 x1 = let T3 x0 x1 x2 = (shape a16) in T2 x0 x1 in x1) () ()) a17) in backpermute (let T4 x0 x1 x2 x3 = (shape a16) ; T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6) (\(T4 x0 x1 x2 x3) -> let T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6) a16) a17 = fold1 (\x0 x1 -> max x0 x1) a16 a18 = zipWith (\x0 x1 -> exp (x1 - x0)) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a16) in x2) a17) a16 in T3 a18 a17 (fold (\x0 x1 -> x0 + x1) 0.0 a18) a19 = a16 a20 = a17 a21 = a20 a22 = zipWith (\x0 x1 -> max x0 x1) a15 a21 a23 = zipWith (\(T2 (T2 (T2 x0 x1) x2) x3) x4 -> let T2 (T2 x5 x6) x7 = T2 (T2 x0 x1) x2 ; T2 x8 x9 = T2 x5 x6 ; x10 = x9 in exp (x8 - x10) * x7 + exp (x3 - x10) * x4) (zipWith (\(T2 (T2 x0 x1) x2) x3 -> T2 (T2 (T2 x0 x1) x2) x3) (zipWith (\(T2 x0 x1) x2 -> T2 (T2 x0 x1) x2) (zipWith (\x0 x1 -> T2 x0 x1) a15 a22) a12) a21) a18 in T3 (zipWith (\x0 x1 -> x0 / x1) (let a24 = a13 in zipWith (\x0 x1 -> x0 + x1) (zipWith (\(T2 (T2 x0 x1) x2) x3 -> (let T2 x4 x5 = T2 x0 x1 in x4 * exp (x5 - x2)) * x3) (zipWith (\(T2 x0 x1) x2 -> T2 (T2 x0 x1) x2) (zipWith (\x0 x1 -> T2 x0 x1) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a8) in x2) a12) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a8) in x2) a15)) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a8) in x2) a22)) a24) (fold1 (\x0 x1 -> x0 + x1) (let a25 = let a25 = replicate (let () = () in T3 (let T1 x0 = let T2 x0 x1 = let T3 x0 x1 x2 = (shape a24) in T2 x0 x1 in T1 x0 in x0) () ()) (slice (let () = () in T3 a4 ! () () ()) a8) a26 = zipWith (\(T2 x0 x1) x2 -> exp (x0 - x1) * x2) (zipWith (\x0 x1 -> T2 x0 x1) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a8) in x2) a21) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a8) in x2) a22)) a19 in zipWith (\x0 x1 -> x0 * x1) (replicate (let () = () in T3 () () (), let T3 x0 x1 x2 = (shape a25) in x2) a26) (replicate (let () = () in T4 () (let T2 x0 x1 = let T3 x0 x1 x2 = (shape a26) in T2 x0 x1 in x1) () ()) a25) in backpermute (let T4 x0 x1 x2 x3 = (shape a25) ; T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6) (\(T4 x0 x1 x2 x3) -> let T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6) a25))) (replicate (let () = () in T2 () (), let T3 x0 x1 x2 = (shape a8) in x2) a23)) a22 a23 in T2 a3 a4 in T1 a3 in a3


Desugared OperationAcc:

\T3 (T1 (b0: [Int])) (T1 (b1: [Int])) (T1 (b2: [Int])) ->
  e0: Int = compute 0
  b3: [Int] = unit e0
  T2 (e1: Int) (e2: Int) = compute let () = () in T2 (let x0 = toIndex () () in (b0 !! x0)) (let x0 = toIndex () () in (b1 !! x0))
  b4: [Float]¹ = alloc Float[Z :. e1 :. e2]
  execute generate (\(T2 x0 x1) -> 1.0, out (Z :. e1 :. e2) b4)
  T2 (e3: Int) (e4: Int) = compute let () = () in T2 (let x0 = toIndex () () in (b0 !! x0)) (let x0 = toIndex () () in (b1 !! x0))
  b5: [Float]¹ = alloc Float[Z :. e3 :. e4]
  execute generate (\(T2 x0 x1) -> 1.0, out (Z :. e3 :. e4) b5)
  T2 (e5: Int) (e6: Int) = compute let () = () in T2 (let x0 = toIndex () () in (b0 !! x0)) (let x0 = toIndex () () in (b1 !! x0))
  b6: [Float]¹ = alloc Float[Z :. e5 :. e6]
  execute generate (\(T2 x0 x1) -> 1.0, out (Z :. e5 :. e6) b6)
  b7: [Float]¹ = alloc Float[Z :. e3 :. e4]
  execute generate (\(T2 x0 x1) -> let x2 = toIndex (T2 e3 e4) (T2 x0 x1) in (b5 !! x2), out (Z :. e3 :. e4) b7)
  T3 (e7: Int) (e8: Int) (e9: Int) = compute let T2 x0 x1 = T2 e1 e2 ; x2 = x1 in (let () = () ; x3 = let x3 = 4 * x2 in div ((let x4 = toIndex () () in (b2 !! x4)) + x3 - 1) x3 in T2 (div x0 x3) x3, x2)
  b8: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
  execute backpermute (\(T3 x0 x1 x2) -> fromIndex (T2 e3 e4) (toIndex (let T2 x3 x4 = T2 e1 e2 ; x5 = x4 in (let () = () ; x6 = let x6 = 4 * x5 in div ((let x7 = toIndex () () in (b2 !! x7)) + x6 - 1) x6 in T2 (div x3 x6) x6, x5)) (T3 x0 x1 x2)), in (Z :. e3 :. e4) b7, out (Z :. e7 :. e8 :. e9) b8)
  b9: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
  execute generate (\(T3 x0 x1 x2) -> let x3 = toIndex (T3 e7 e8 e9) (T3 x0 x1 x2) in (b8 !! x3), out (Z :. e7 :. e8 :. e9) b9)
  T3 (e10: Int) (e11: Int) (e12: Int) = compute let T2 x0 x1 = T2 e1 e2 ; x2 = x1 in (let () = () ; x3 = min (let x3 = 4 * x2 in div ((let x4 = toIndex () () in (b2 !! x4)) + x3 - 1) x3) x2 in T2 (div x0 x3) x3, x2)
  b10: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
  execute generate (\(T3 x0 x1 x2) -> 0.0, out (Z :. e10 :. e11 :. e12) b10)
  T2 (e13: Int) (e14: Int) = compute let () = () ; T2 x0 x1 = T2 e1 e2 ; x2 = let x2 = x1 in min (let x3 = 4 * x2 in div ((let x4 = toIndex () () in (b2 !! x4)) + x3 - 1) x3) x2 in T2 (div x0 x2) x2
  b11: [Float]¹ = alloc Float[Z :. e13 :. e14]
  execute generate (\(T2 x0 x1) -> -3.4028235e38, out (Z :. e13 :. e14) b11)
  T2 (e15: Int) (e16: Int) = compute let () = () ; T2 x0 x1 = T2 e1 e2 ; x2 = let x2 = x1 in min (let x3 = 4 * x2 in div ((let x4 = toIndex () () in (b2 !! x4)) + x3 - 1) x3) x2 in T2 (div x0 x2) x2
  b12: [Float]¹ = alloc Float[Z :. e15 :. e16]
  execute generate (\(T2 x0 x1) -> 0.0, out (Z :. e15 :. e16) b12)
  b13: [Float]¹ = alloc Float[Z :. e1 :. e2]
  execute generate (\(T2 x0 x1) -> let x2 = toIndex (T2 e1 e2) (T2 x0 x1) in (b4 !! x2), out (Z :. e1 :. e2) b13)
  T3 (e17: Int) (e18: Int) (e19: Int) = compute let T2 x0 x1 = T2 e1 e2 ; x2 = x1 in (let () = () ; x3 = min (let x3 = 4 * x2 in div ((let x4 = toIndex () () in (b2 !! x4)) + x3 - 1) x3) x2 in T2 (div x0 x3) x3, x2)
  b14: [Float]¹ = alloc Float[Z :. e17 :. e18 :. e19]
  execute backpermute (\(T3 x0 x1 x2) -> fromIndex (T2 e1 e2) (toIndex (let T2 x3 x4 = T2 e1 e2 ; x5 = x4 in (let () = () ; x6 = min (let x6 = 4 * x5 in div ((let x7 = toIndex () () in (b2 !! x7)) + x6 - 1) x6) x5 in T2 (div x3 x6) x6, x5)) (T3 x0 x1 x2)), in (Z :. e1 :. e2) b13, out (Z :. e17 :. e18 :. e19) b14)
  b15: [Float]¹ = alloc Float[Z :. e17 :. e18 :. e19]
  execute generate (\(T3 x0 x1 x2) -> let x3 = toIndex (T3 e17 e18 e19) (T3 x0 x1 x2) in (b14 !! x3), out (Z :. e17 :. e18 :. e19) b15)
  T3 (e20: Int) () () = compute let () = () in T3 (let x0 = toIndex () () in (b3 !! x0)) () ()
  T2 (e21: Int) (e22: Int) = compute indexSlice (T3 e20 () ()) (T3 e7 e8 e9)
  b16: [Float]¹ = alloc Float[Z :. e21 :. e22]
  execute backpermute (\(T2 x0 x1) -> indexFull (T3 e20 () ()) (T2 x0 x1), in (Z :. e7 :. e8 :. e9) b9, out (Z :. e21 :. e22) b16)
  T3 (e23: Int) () () = compute let () = () in T3 (let T1 x0 = let T2 x0 x1 = let T3 x0 x1 x2 = T3 e7 e8 e9 in T2 x0 x1 in T1 x0 in x0) () ()
  T3 (e24: Int) (e25: Int) (e26: Int) = compute indexFull (T3 e23 () ()) (T2 e21 e22)
  b17: [Float]¹ = alloc Float[Z :. e24 :. e25 :. e26]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 e23 () ()) (T3 x0 x1 x2), in (Z :. e21 :. e22) b16, out (Z :. e24 :. e25 :. e26) b17)
  T3 (e27: Int) (e28: Int) (e29: Int) = compute let T3 x0 x1 x2 = T3 e24 e25 e26 ; T2 x3 x4 = T2 x0 x1 in T3 x3 x2 x4
  b18: [Float]¹ = alloc Float[Z :. e27 :. e28 :. e29]
  execute backpermute (\(T3 x0 x1 x2) -> let T2 x3 x4 = T2 x0 x1 in T3 x3 x2 x4, in (Z :. e24 :. e25 :. e26) b17, out (Z :. e27 :. e28 :. e29) b18)
  T3 () () () = compute let () = () in T3 () () ()
  e30: Int = compute let T3 x0 x1 x2 = T3 e27 e28 e29 in x2
  T4 (e31: Int) (e32: Int) (e33: Int) (e34: Int) = compute indexFull (T4 () () () e30) (T3 e17 e18 e19)
  b19: [Float]¹ = alloc Float[Z :. e31 :. e32 :. e33 :. e34]
  execute backpermute (\(T4 x0 x1 x2 x3) -> indexSlice (T4 () () () e30) (T4 x0 x1 x2 x3), in (Z :. e17 :. e18 :. e19) b15, out (Z :. e31 :. e32 :. e33 :. e34) b19)
  T4 () (e35: Int) () () = compute let () = () in T4 () (let T2 x0 x1 = let T3 x0 x1 x2 = T3 e17 e18 e19 in T2 x0 x1 in x1) () ()
  T4 (e36: Int) (e37: Int) (e38: Int) (e39: Int) = compute indexFull (T4 () e35 () ()) (T3 e27 e28 e29)
  b20: [Float]¹ = alloc Float[Z :. e36 :. e37 :. e38 :. e39]
  execute backpermute (\(T4 x0 x1 x2 x3) -> indexSlice (T4 () e35 () ()) (T4 x0 x1 x2 x3), in (Z :. e27 :. e28 :. e29) b18, out (Z :. e36 :. e37 :. e38 :. e39) b20)
  e40: Int = compute min e31 e36
  e41: Int = compute min e32 e37
  e42: Int = compute min e33 e38
  e43: Int = compute min e34 e39
  b21: [Float]¹ = alloc Float[Z :. e40 :. e41 :. e42 :. e43]
  b22: [Float]¹ = alloc Float[Z :. e40 :. e41 :. e42 :. e43]
  b23: [Float]¹ = alloc Float[Z :. e40 :. e41 :. e42 :. e43]
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e31 :. e32 :. e33 :. e34) b19, out (Z :. e40 :. e41 :. e42 :. e43) b22)
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e36 :. e37 :. e38 :. e39) b20, out (Z :. e40 :. e41 :. e42 :. e43) b23)
  execute map (\(x0, x1) -> x0 * x1, in (Z :. e40 :. e41 :. e42 :. e43) (b22, b23), out (Z :. e40 :. e41 :. e42 :. e43) b21)
  T4 (e44: Int) (e45: Int) (e46: Int) (e47: Int) = compute let T4 x0 x1 x2 x3 = T4 e40 e41 e42 e43 ; T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6
  b24: [Float]¹ = alloc Float[Z :. e44 :. e45 :. e46 :. e47]
  execute backpermute (\(T4 x0 x1 x2 x3) -> let T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6, in (Z :. e40 :. e41 :. e42 :. e43) b21, out (Z :. e44 :. e45 :. e46 :. e47) b24)
  b25: [Float]¹ = alloc Float[Z :. e44 :. e45 :. e46]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e44 :. e45 :. e46 :. e47) b24, out (Z :. e44 :. e45 :. e46) b25)
  b26: [Float]¹ = alloc Float[Z :. e44 :. e45]
  execute fold-2 (\x0 x1 -> max x0 x1, in (Z :. e44 :. e45 :. e46) b25, out (Z :. e44 :. e45) b26)
  T2 () () = compute let () = () in T2 () ()
  e48: Int = compute let T3 x0 x1 x2 = T3 e44 e45 e46 in x2
  T3 (e49: Int) (e50: Int) (e51: Int) = compute indexFull (T3 () () e48) (T2 e44 e45)
  b27: [Float]¹ = alloc Float[Z :. e49 :. e50 :. e51]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e48) (T3 x0 x1 x2), in (Z :. e44 :. e45) b26, out (Z :. e49 :. e50 :. e51) b27)
  e52: Int = compute min e49 e44
  e53: Int = compute min e50 e45
  e54: Int = compute min e51 e46
  b28: [Float]¹ = alloc Float[Z :. e52 :. e53 :. e54]
  b29: [Float]¹ = alloc Float[Z :. e52 :. e53 :. e54]
  b30: [Float]¹ = alloc Float[Z :. e52 :. e53 :. e54]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e49 :. e50 :. e51) b27, out (Z :. e52 :. e53 :. e54) b29)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e44 :. e45 :. e46) b25, out (Z :. e52 :. e53 :. e54) b30)
  execute map (\(x0, x1) -> exp (x1 - x0), in (Z :. e52 :. e53 :. e54) (b29, b30), out (Z :. e52 :. e53 :. e54) b28)
  b31: [Float]¹ = alloc Float[Z :. e52 :. e53]
  b32: [Float]¹ = alloc Float[Z :. e52 :. e53]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e52 :. e53 :. e54) b28, out (Z :. e52 :. e53) b32)
  execute map (\x0 -> let (x1, x2) = (0.0, x0) in x1 + x2, in (Z :. e52 :. e53) b32, out (Z :. e52 :. e53) b31)
  e55: Int = compute min e13 e44
  e56: Int = compute min e14 e45
  b33: [Float]¹ = alloc Float[Z :. e55 :. e56]
  b34: [Float]¹ = alloc Float[Z :. e55 :. e56]
  b35: [Float]¹ = alloc Float[Z :. e55 :. e56]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e13 :. e14) b11, out (Z :. e55 :. e56) b34)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e44 :. e45) b26, out (Z :. e55 :. e56) b35)
  execute map (\(x0, x1) -> max x0 x1, in (Z :. e55 :. e56) (b34, b35), out (Z :. e55 :. e56) b33)
  e57: Int = compute min e13 e55
  e58: Int = compute min e14 e56
  b36: [Float]¹ = alloc Float[Z :. e57 :. e58]
  b37: [Float]¹ = alloc Float[Z :. e57 :. e58]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e13 :. e14) b11, out (Z :. e57 :. e58) b36)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e55 :. e56) b33, out (Z :. e57 :. e58) b37)
  e59: Int = compute min e57 e15
  e60: Int = compute min e58 e16
  b38: [Float]¹ = alloc Float[Z :. e59 :. e60]
  b39: [Float]¹ = alloc Float[Z :. e59 :. e60]
  b40: [Float]¹ = alloc Float[Z :. e59 :. e60]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e57 :. e58) T2 b36 b37, out (Z :. e59 :. e60) T2 b38 b39)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e15 :. e16) b12, out (Z :. e59 :. e60) b40)
  e61: Int = compute min e59 e44
  e62: Int = compute min e60 e45
  b41: [Float]¹ = alloc Float[Z :. e61 :. e62]
  b42: [Float]¹ = alloc Float[Z :. e61 :. e62]
  b43: [Float]¹ = alloc Float[Z :. e61 :. e62]
  b44: [Float]¹ = alloc Float[Z :. e61 :. e62]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e59 :. e60) (((), T2 b38 b39), b40), out (Z :. e61 :. e62) (((), T2 b41 b42), b43))
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e44 :. e45) b26, out (Z :. e61 :. e62) b44)
  e63: Int = compute min e61 e52
  e64: Int = compute min e62 e53
  b45: [Float]¹ = alloc Float[Z :. e63 :. e64]
  b46: [Float]¹ = alloc Float[Z :. e63 :. e64]
  b47: [Float]¹ = alloc Float[Z :. e63 :. e64]
  b48: [Float]¹ = alloc Float[Z :. e63 :. e64]
  b49: [Float]¹ = alloc Float[Z :. e63 :. e64]
  b50: [Float]¹ = alloc Float[Z :. e63 :. e64]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e61 :. e62) (((), (((), T2 b41 b42), b43)), b44), out (Z :. e63 :. e64) (((), (((), T2 b46 b47), b48)), b49))
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e52 :. e53) b31, out (Z :. e63 :. e64) b50)
  execute map (\(T3 (T2 (T2 x0 x1) x2) x3 x4) -> let T2 (T2 x5 x6) x7 = T2 (T2 x0 x1) x2 ; T2 x8 x9 = T2 x5 x6 ; x10 = x9 in exp (x8 - x10) * x7 + exp (x3 - x10) * x4, in (Z :. e63 :. e64) ((((), (((), T2 b46 b47), b48)), b49), b50), out (Z :. e63 :. e64) b45)
  T2 () () = compute let () = () in T2 () ()
  e65: Int = compute let T3 x0 x1 x2 = T3 e7 e8 e9 in x2
  T3 (e66: Int) (e67: Int) (e68: Int) = compute indexFull (T3 () () e65) (T2 e15 e16)
  b51: [Float]¹ = alloc Float[Z :. e66 :. e67 :. e68]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e65) (T3 x0 x1 x2), in (Z :. e15 :. e16) b12, out (Z :. e66 :. e67 :. e68) b51)
  T2 () () = compute let () = () in T2 () ()
  e69: Int = compute let T3 x0 x1 x2 = T3 e7 e8 e9 in x2
  T3 (e70: Int) (e71: Int) (e72: Int) = compute indexFull (T3 () () e69) (T2 e13 e14)
  b52: [Float]¹ = alloc Float[Z :. e70 :. e71 :. e72]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e69) (T3 x0 x1 x2), in (Z :. e13 :. e14) b11, out (Z :. e70 :. e71 :. e72) b52)
  e73: Int = compute min e66 e70
  e74: Int = compute min e67 e71
  e75: Int = compute min e68 e72
  b53: [Float]¹ = alloc Float[Z :. e73 :. e74 :. e75]
  b54: [Float]¹ = alloc Float[Z :. e73 :. e74 :. e75]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e66 :. e67 :. e68) b51, out (Z :. e73 :. e74 :. e75) b53)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e70 :. e71 :. e72) b52, out (Z :. e73 :. e74 :. e75) b54)
  T2 () () = compute let () = () in T2 () ()
  e76: Int = compute let T3 x0 x1 x2 = T3 e7 e8 e9 in x2
  T3 (e77: Int) (e78: Int) (e79: Int) = compute indexFull (T3 () () e76) (T2 e55 e56)
  b55: [Float]¹ = alloc Float[Z :. e77 :. e78 :. e79]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e76) (T3 x0 x1 x2), in (Z :. e55 :. e56) b33, out (Z :. e77 :. e78 :. e79) b55)
  e80: Int = compute min e73 e77
  e81: Int = compute min e74 e78
  e82: Int = compute min e75 e79
  b56: [Float]¹ = alloc Float[Z :. e80 :. e81 :. e82]
  b57: [Float]¹ = alloc Float[Z :. e80 :. e81 :. e82]
  b58: [Float]¹ = alloc Float[Z :. e80 :. e81 :. e82]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e73 :. e74 :. e75) T2 b53 b54, out (Z :. e80 :. e81 :. e82) T2 b56 b57)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e77 :. e78 :. e79) b55, out (Z :. e80 :. e81 :. e82) b58)
  e83: Int = compute min e80 e10
  e84: Int = compute min e81 e11
  e85: Int = compute min e82 e12
  b59: [Float]¹ = alloc Float[Z :. e83 :. e84 :. e85]
  b60: [Float]¹ = alloc Float[Z :. e83 :. e84 :. e85]
  b61: [Float]¹ = alloc Float[Z :. e83 :. e84 :. e85]
  b62: [Float]¹ = alloc Float[Z :. e83 :. e84 :. e85]
  b63: [Float]¹ = alloc Float[Z :. e83 :. e84 :. e85]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e80 :. e81 :. e82) (((), T2 b56 b57), b58), out (Z :. e83 :. e84 :. e85) (((), T2 b60 b61), b62))
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e10 :. e11 :. e12) b10, out (Z :. e83 :. e84 :. e85) b63)
  execute map (\(T3 (T2 x0 x1) x2 x3) -> (let T2 x4 x5 = T2 x0 x1 in x4 * exp (x5 - x2)) * x3, in (Z :. e83 :. e84 :. e85) ((((), T2 b60 b61), b62), b63), out (Z :. e83 :. e84 :. e85) b59)
  T3 (e86: Int) () () = compute let () = () in T3 (let x0 = toIndex () () in (b3 !! x0)) () ()
  T2 (e87: Int) (e88: Int) = compute indexSlice (T3 e86 () ()) (T3 e7 e8 e9)
  b64: [Float]¹ = alloc Float[Z :. e87 :. e88]
  execute backpermute (\(T2 x0 x1) -> indexFull (T3 e86 () ()) (T2 x0 x1), in (Z :. e7 :. e8 :. e9) b9, out (Z :. e87 :. e88) b64)
  T3 (e89: Int) () () = compute let () = () in T3 (let T1 x0 = let T2 x0 x1 = let T3 x0 x1 x2 = T3 e10 e11 e12 in T2 x0 x1 in T1 x0 in x0) () ()
  T3 (e90: Int) (e91: Int) (e92: Int) = compute indexFull (T3 e89 () ()) (T2 e87 e88)
  b65: [Float]¹ = alloc Float[Z :. e90 :. e91 :. e92]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 e89 () ()) (T3 x0 x1 x2), in (Z :. e87 :. e88) b64, out (Z :. e90 :. e91 :. e92) b65)
  T2 () () = compute let () = () in T2 () ()
  e93: Int = compute let T3 x0 x1 x2 = T3 e7 e8 e9 in x2
  T3 (e94: Int) (e95: Int) (e96: Int) = compute indexFull (T3 () () e93) (T2 e44 e45)
  b66: [Float]¹ = alloc Float[Z :. e94 :. e95 :. e96]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e93) (T3 x0 x1 x2), in (Z :. e44 :. e45) b26, out (Z :. e94 :. e95 :. e96) b66)
  T2 () () = compute let () = () in T2 () ()
  e97: Int = compute let T3 x0 x1 x2 = T3 e7 e8 e9 in x2
  T3 (e98: Int) (e99: Int) (e100: Int) = compute indexFull (T3 () () e97) (T2 e55 e56)
  b67: [Float]¹ = alloc Float[Z :. e98 :. e99 :. e100]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e97) (T3 x0 x1 x2), in (Z :. e55 :. e56) b33, out (Z :. e98 :. e99 :. e100) b67)
  e101: Int = compute min e94 e98
  e102: Int = compute min e95 e99
  e103: Int = compute min e96 e100
  b68: [Float]¹ = alloc Float[Z :. e101 :. e102 :. e103]
  b69: [Float]¹ = alloc Float[Z :. e101 :. e102 :. e103]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e94 :. e95 :. e96) b66, out (Z :. e101 :. e102 :. e103) b68)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e98 :. e99 :. e100) b67, out (Z :. e101 :. e102 :. e103) b69)
  e104: Int = compute min e101 e52
  e105: Int = compute min e102 e53
  e106: Int = compute min e103 e54
  b70: [Float]¹ = alloc Float[Z :. e104 :. e105 :. e106]
  b71: [Float]¹ = alloc Float[Z :. e104 :. e105 :. e106]
  b72: [Float]¹ = alloc Float[Z :. e104 :. e105 :. e106]
  b73: [Float]¹ = alloc Float[Z :. e104 :. e105 :. e106]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e101 :. e102 :. e103) T2 b68 b69, out (Z :. e104 :. e105 :. e106) T2 b71 b72)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e52 :. e53 :. e54) b28, out (Z :. e104 :. e105 :. e106) b73)
  execute map (\(T3 x0 x1 x2) -> exp (x0 - x1) * x2, in (Z :. e104 :. e105 :. e106) T3 b71 b72 b73, out (Z :. e104 :. e105 :. e106) b70)
  T3 () () () = compute let () = () in T3 () () ()
  e107: Int = compute let T3 x0 x1 x2 = T3 e90 e91 e92 in x2
  T4 (e108: Int) (e109: Int) (e110: Int) (e111: Int) = compute indexFull (T4 () () () e107) (T3 e104 e105 e106)
  b74: [Float]¹ = alloc Float[Z :. e108 :. e109 :. e110 :. e111]
  execute backpermute (\(T4 x0 x1 x2 x3) -> indexSlice (T4 () () () e107) (T4 x0 x1 x2 x3), in (Z :. e104 :. e105 :. e106) b70, out (Z :. e108 :. e109 :. e110 :. e111) b74)
  T4 () (e112: Int) () () = compute let () = () in T4 () (let T2 x0 x1 = let T3 x0 x1 x2 = T3 e104 e105 e106 in T2 x0 x1 in x1) () ()
  T4 (e113: Int) (e114: Int) (e115: Int) (e116: Int) = compute indexFull (T4 () e112 () ()) (T3 e90 e91 e92)
  b75: [Float]¹ = alloc Float[Z :. e113 :. e114 :. e115 :. e116]
  execute backpermute (\(T4 x0 x1 x2 x3) -> indexSlice (T4 () e112 () ()) (T4 x0 x1 x2 x3), in (Z :. e90 :. e91 :. e92) b65, out (Z :. e113 :. e114 :. e115 :. e116) b75)
  e117: Int = compute min e108 e113
  e118: Int = compute min e109 e114
  e119: Int = compute min e110 e115
  e120: Int = compute min e111 e116
  b76: [Float]¹ = alloc Float[Z :. e117 :. e118 :. e119 :. e120]
  b77: [Float]¹ = alloc Float[Z :. e117 :. e118 :. e119 :. e120]
  b78: [Float]¹ = alloc Float[Z :. e117 :. e118 :. e119 :. e120]
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e108 :. e109 :. e110 :. e111) b74, out (Z :. e117 :. e118 :. e119 :. e120) b77)
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e113 :. e114 :. e115 :. e116) b75, out (Z :. e117 :. e118 :. e119 :. e120) b78)
  execute map (\(x0, x1) -> x0 * x1, in (Z :. e117 :. e118 :. e119 :. e120) (b77, b78), out (Z :. e117 :. e118 :. e119 :. e120) b76)
  T4 (e121: Int) (e122: Int) (e123: Int) (e124: Int) = compute let T4 x0 x1 x2 x3 = T4 e117 e118 e119 e120 ; T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6
  b79: [Float]¹ = alloc Float[Z :. e121 :. e122 :. e123 :. e124]
  execute backpermute (\(T4 x0 x1 x2 x3) -> let T3 x4 x5 x6 = T3 x0 x1 x2 in T4 x4 x5 x3 x6, in (Z :. e117 :. e118 :. e119 :. e120) b76, out (Z :. e121 :. e122 :. e123 :. e124) b79)
  b80: [Float]¹ = alloc Float[Z :. e121 :. e122 :. e123]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e121 :. e122 :. e123 :. e124) b79, out (Z :. e121 :. e122 :. e123) b80)
  e125: Int = compute min e83 e121
  e126: Int = compute min e84 e122
  e127: Int = compute min e85 e123
  b81: [Float]¹ = alloc Float[Z :. e125 :. e126 :. e127]
  b82: [Float]¹ = alloc Float[Z :. e125 :. e126 :. e127]
  b83: [Float]¹ = alloc Float[Z :. e125 :. e126 :. e127]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e83 :. e84 :. e85) b59, out (Z :. e125 :. e126 :. e127) b82)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e121 :. e122 :. e123) b80, out (Z :. e125 :. e126 :. e127) b83)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e125 :. e126 :. e127) (b82, b83), out (Z :. e125 :. e126 :. e127) b81)
  T2 () () = compute let () = () in T2 () ()
  e128: Int = compute let T3 x0 x1 x2 = T3 e7 e8 e9 in x2
  T3 (e129: Int) (e130: Int) (e131: Int) = compute indexFull (T3 () () e128) (T2 e63 e64)
  b84: [Float]¹ = alloc Float[Z :. e129 :. e130 :. e131]
  execute backpermute (\(T3 x0 x1 x2) -> indexSlice (T3 () () e128) (T3 x0 x1 x2), in (Z :. e63 :. e64) b45, out (Z :. e129 :. e130 :. e131) b84)
  e132: Int = compute min e125 e129
  e133: Int = compute min e126 e130
  e134: Int = compute min e127 e131
  b85: [Float]¹ = alloc Float[Z :. e132 :. e133 :. e134]
  b86: [Float]¹ = alloc Float[Z :. e132 :. e133 :. e134]
  b87: [Float]¹ = alloc Float[Z :. e132 :. e133 :. e134]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e125 :. e126 :. e127) b81, out (Z :. e132 :. e133 :. e134) b86)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e129 :. e130 :. e131) b84, out (Z :. e132 :. e133 :. e134) b87)
  execute map (\(x0, x1) -> x0 / x1, in (Z :. e132 :. e133 :. e134) (b86, b87), out (Z :. e132 :. e133 :. e134) b85)
  return (T4 e132 e133 e134 b85)


Simplified OperationAcc:

\T3 (T1 (b0: [Int])) (T1 (b1: [Int])) (T1 (b2: [Int])) ->
  e0: Int = compute (b0 !! 0)
  e1: Int = compute (b1 !! 0)
  b3: [Float]¹ = alloc Float[Z :. e0 :. e1]
  execute generate (\_ -> 1.0, out (Z :. e0 :. e1) b3)
  e2: Int = compute (b0 !! 0)
  e3: Int = compute (b1 !! 0)
  b4: [Float]¹ = alloc Float[Z :. e2 :. e3]
  execute generate (\_ -> 1.0, out (Z :. e2 :. e3) b4)
  b5: [Float]¹ = alloc Float[Z :. e2 :. e3]
  execute generate (\(T2 x0 x1) -> (b4 !! toIndex (T2 e2 e3) (T2 x0 x1)), out (Z :. e2 :. e3) b5)
  T3 (e4: Int) (e5: Int) (e6: Int) = compute let x0 = e1 in (let x1 = let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1 in T2 (div e0 x1) x1, x0)
  b6: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
  execute backpermute (\(T3 x0 x1 x2) -> fromIndex (T2 e2 e3) (toIndex (let x3 = e1 in (let x4 = let x4 = 4 * x3 in div (-1 + ((b2 !! 0) + x4)) x4 in T2 (div e0 x4) x4, x3)) (T3 x0 x1 x2)), in (Z :. e2 :. e3) b5, out (Z :. e4 :. e5 :. e6) b6)
  b7: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
  execute generate (\(T3 x0 x1 x2) -> (b6 !! toIndex (T3 e4 e5 e6) (T3 x0 x1 x2)), out (Z :. e4 :. e5 :. e6) b7)
  T3 (e7: Int) (e8: Int) (e9: Int) = compute let x0 = e1 in (let x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1, x0)
  b8: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
  execute generate (\_ -> 0.0, out (Z :. e7 :. e8 :. e9) b8)
  T2 (e10: Int) (e11: Int) = compute let x0 = e1 ; x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1
  b9: [Float]¹ = alloc Float[Z :. e10 :. e11]
  execute generate (\_ -> -3.4028235e38, out (Z :. e10 :. e11) b9)
  T2 (e12: Int) (e13: Int) = compute let x0 = e1 ; x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1
  b10: [Float]¹ = alloc Float[Z :. e12 :. e13]
  execute generate (\_ -> 0.0, out (Z :. e12 :. e13) b10)
  b11: [Float]¹ = alloc Float[Z :. e0 :. e1]
  execute generate (\(T2 x0 x1) -> (b3 !! toIndex (T2 e0 e1) (T2 x0 x1)), out (Z :. e0 :. e1) b11)
  T3 (e14: Int) (e15: Int) (e16: Int) = compute let x0 = e1 in (let x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1, x0)
  b12: [Float]¹ = alloc Float[Z :. e14 :. e15 :. e16]
  execute backpermute (\(T3 x0 x1 x2) -> fromIndex (T2 e0 e1) (toIndex (let x3 = e1 in (let x4 = min (let x4 = 4 * x3 in div (-1 + ((b2 !! 0) + x4)) x4) x3 in T2 (div e0 x4) x4, x3)) (T3 x0 x1 x2)), in (Z :. e0 :. e1) b11, out (Z :. e14 :. e15 :. e16) b12)
  b13: [Float]¹ = alloc Float[Z :. e14 :. e15 :. e16]
  execute generate (\(T3 x0 x1 x2) -> (b12 !! toIndex (T3 e14 e15 e16) (T3 x0 x1 x2)), out (Z :. e14 :. e15 :. e16) b13)
  b14: [Float]¹ = alloc Float[Z :. e5 :. e6]
  execute backpermute (\(T2 x0 x1) -> T3 0 x0 x1, in (Z :. e4 :. e5 :. e6) b7, out (Z :. e5 :. e6) b14)
  b15: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
  execute backpermute (\((_, x0), x1) -> T2 x0 x1, in (Z :. e5 :. e6) b14, out (Z :. e4 :. e5 :. e6) b15)
  b16: [Float]¹ = alloc Float[Z :. e4 :. e6 :. e5]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x2 x1, in (Z :. e4 :. e5 :. e6) b15, out (Z :. e4 :. e6 :. e5) b16)
  b17: [Float]¹ = alloc Float[Z :. e14 :. e15 :. e16 :. e5]
  execute backpermute (\(T4 x0 x1 x2 _) -> T3 x0 x1 x2, in (Z :. e14 :. e15 :. e16) b13, out (Z :. e14 :. e15 :. e16 :. e5) b17)
  b18: [Float]¹ = alloc Float[Z :. e4 :. e15 :. e6 :. e5]
  execute backpermute (\(T4 x0 _ x1 x2) -> T3 x0 x1 x2, in (Z :. e4 :. e6 :. e5) b16, out (Z :. e4 :. e15 :. e6 :. e5) b18)
  e17: Int = compute min e14 e4
  e18: Int = compute min e16 e6
  b19: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e18 :. e5]
  b20: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e18 :. e5]
  b21: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e18 :. e5]
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e14 :. e15 :. e16 :. e5) b17, out (Z :. e17 :. e15 :. e18 :. e5) b20)
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e4 :. e15 :. e6 :. e5) b18, out (Z :. e17 :. e15 :. e18 :. e5) b21)
  execute map (\(x0, x1) -> x0 * x1, in (Z :. e17 :. e15 :. e18 :. e5) (b20, b21), out (Z :. e17 :. e15 :. e18 :. e5) b19)
  b22: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5 :. e18]
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x3 x2, in (Z :. e17 :. e15 :. e18 :. e5) b19, out (Z :. e17 :. e15 :. e5 :. e18) b22)
  b23: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e17 :. e15 :. e5 :. e18) b22, out (Z :. e17 :. e15 :. e5) b23)
  b24: [Float]¹ = alloc Float[Z :. e17 :. e15]
  execute fold-2 (\x0 x1 -> max x0 x1, in (Z :. e17 :. e15 :. e5) b23, out (Z :. e17 :. e15) b24)
  b25: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e17 :. e15) b24, out (Z :. e17 :. e15 :. e5) b25)
  b26: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5]
  execute map (\(x0, x1) -> exp (x1 - x0), in (Z :. e17 :. e15 :. e5) (b25, b23), out (Z :. e17 :. e15 :. e5) b26)
  b27: [Float]¹ = alloc Float[Z :. e17 :. e15]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e17 :. e15 :. e5) b26, out (Z :. e17 :. e15) b27)
  e19: Int = compute min e10 e17
  e20: Int = compute min e11 e15
  b28: [Float]¹ = alloc Float[Z :. e19 :. e20]
  b29: [Float]¹ = alloc Float[Z :. e19 :. e20]
  b30: [Float]¹ = alloc Float[Z :. e19 :. e20]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e10 :. e11) b9, out (Z :. e19 :. e20) b29)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e17 :. e15) b24, out (Z :. e19 :. e20) b30)
  execute map (\(x0, x1) -> max x0 x1, in (Z :. e19 :. e20) (b29, b30), out (Z :. e19 :. e20) b28)
  e21: Int = compute min e10 e19
  e22: Int = compute min e11 e20
  b31: [Float]¹ = alloc Float[Z :. e21 :. e22]
  b32: [Float]¹ = alloc Float[Z :. e21 :. e22]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e10 :. e11) b9, out (Z :. e21 :. e22) b31)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e19 :. e20) b28, out (Z :. e21 :. e22) b32)
  e23: Int = compute min e21 e12
  e24: Int = compute min e22 e13
  b33: [Float]¹ = alloc Float[Z :. e23 :. e24]
  b34: [Float]¹ = alloc Float[Z :. e23 :. e24]
  b35: [Float]¹ = alloc Float[Z :. e23 :. e24]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e21 :. e22) T2 b31 b32, out (Z :. e23 :. e24) T2 b33 b34)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e12 :. e13) b10, out (Z :. e23 :. e24) b35)
  e25: Int = compute min e23 e17
  e26: Int = compute min e24 e15
  b36: [Float]¹ = alloc Float[Z :. e25 :. e26]
  b37: [Float]¹ = alloc Float[Z :. e25 :. e26]
  b38: [Float]¹ = alloc Float[Z :. e25 :. e26]
  b39: [Float]¹ = alloc Float[Z :. e25 :. e26]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e23 :. e24) (((), T2 b33 b34), b35), out (Z :. e25 :. e26) (((), T2 b36 b37), b38))
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e17 :. e15) b24, out (Z :. e25 :. e26) b39)
  e27: Int = compute min e25 e17
  e28: Int = compute min e26 e15
  b40: [Float]¹ = alloc Float[Z :. e27 :. e28]
  b41: [Float]¹ = alloc Float[Z :. e27 :. e28]
  b42: [Float]¹ = alloc Float[Z :. e27 :. e28]
  b43: [Float]¹ = alloc Float[Z :. e27 :. e28]
  b44: [Float]¹ = alloc Float[Z :. e27 :. e28]
  b45: [Float]¹ = alloc Float[Z :. e27 :. e28]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e25 :. e26) (((), (((), T2 b36 b37), b38)), b39), out (Z :. e27 :. e28) (((), (((), T2 b41 b42), b43)), b44))
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e17 :. e15) b27, out (Z :. e27 :. e28) b45)
  execute map (\(T3 (T2 (T2 x0 x1) x2) x3 x4) -> exp (x0 - x1) * x2 + exp (x3 - x1) * x4, in (Z :. e27 :. e28) ((((), (((), T2 b41 b42), b43)), b44), b45), out (Z :. e27 :. e28) b40)
  b46: [Float]¹ = alloc Float[Z :. e12 :. e13 :. e6]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e12 :. e13) b10, out (Z :. e12 :. e13 :. e6) b46)
  b47: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e6]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e10 :. e11) b9, out (Z :. e10 :. e11 :. e6) b47)
  e29: Int = compute min e12 e10
  e30: Int = compute min e13 e11
  b48: [Float]¹ = alloc Float[Z :. e29 :. e30 :. e6]
  b49: [Float]¹ = alloc Float[Z :. e29 :. e30 :. e6]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e12 :. e13 :. e6) b46, out (Z :. e29 :. e30 :. e6) b48)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e10 :. e11 :. e6) b47, out (Z :. e29 :. e30 :. e6) b49)
  b50: [Float]¹ = alloc Float[Z :. e19 :. e20 :. e6]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e19 :. e20) b28, out (Z :. e19 :. e20 :. e6) b50)
  e31: Int = compute min e29 e19
  e32: Int = compute min e30 e20
  b51: [Float]¹ = alloc Float[Z :. e31 :. e32 :. e6]
  b52: [Float]¹ = alloc Float[Z :. e31 :. e32 :. e6]
  b53: [Float]¹ = alloc Float[Z :. e31 :. e32 :. e6]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e29 :. e30 :. e6) T2 b48 b49, out (Z :. e31 :. e32 :. e6) T2 b51 b52)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e19 :. e20 :. e6) b50, out (Z :. e31 :. e32 :. e6) b53)
  e33: Int = compute min e31 e7
  e34: Int = compute min e32 e8
  e35: Int = compute min e6 e9
  b54: [Float]¹ = alloc Float[Z :. e33 :. e34 :. e35]
  b55: [Float]¹ = alloc Float[Z :. e33 :. e34 :. e35]
  b56: [Float]¹ = alloc Float[Z :. e33 :. e34 :. e35]
  b57: [Float]¹ = alloc Float[Z :. e33 :. e34 :. e35]
  b58: [Float]¹ = alloc Float[Z :. e33 :. e34 :. e35]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e31 :. e32 :. e6) (((), T2 b51 b52), b53), out (Z :. e33 :. e34 :. e35) (((), T2 b55 b56), b57))
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e7 :. e8 :. e9) b8, out (Z :. e33 :. e34 :. e35) b58)
  execute map (\(T3 (T2 x0 x1) x2 x3) -> x0 * exp (x1 - x2) * x3, in (Z :. e33 :. e34 :. e35) ((((), T2 b55 b56), b57), b58), out (Z :. e33 :. e34 :. e35) b54)
  b59: [Float]¹ = alloc Float[Z :. e5 :. e6]
  execute backpermute (\(T2 x0 x1) -> T3 0 x0 x1, in (Z :. e4 :. e5 :. e6) b7, out (Z :. e5 :. e6) b59)
  b60: [Float]¹ = alloc Float[Z :. e7 :. e5 :. e6]
  execute backpermute (\((_, x0), x1) -> T2 x0 x1, in (Z :. e5 :. e6) b59, out (Z :. e7 :. e5 :. e6) b60)
  b61: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e6]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e17 :. e15) b24, out (Z :. e17 :. e15 :. e6) b61)
  b62: [Float]¹ = alloc Float[Z :. e19 :. e20 :. e6]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e19 :. e20) b28, out (Z :. e19 :. e20 :. e6) b62)
  e36: Int = compute min e17 e19
  e37: Int = compute min e15 e20
  b63: [Float]¹ = alloc Float[Z :. e36 :. e37 :. e6]
  b64: [Float]¹ = alloc Float[Z :. e36 :. e37 :. e6]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e17 :. e15 :. e6) b61, out (Z :. e36 :. e37 :. e6) b63)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e19 :. e20 :. e6) b62, out (Z :. e36 :. e37 :. e6) b64)
  e38: Int = compute min e36 e17
  e39: Int = compute min e37 e15
  e40: Int = compute min e6 e5
  b65: [Float]¹ = alloc Float[Z :. e38 :. e39 :. e40]
  b66: [Float]¹ = alloc Float[Z :. e38 :. e39 :. e40]
  b67: [Float]¹ = alloc Float[Z :. e38 :. e39 :. e40]
  b68: [Float]¹ = alloc Float[Z :. e38 :. e39 :. e40]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e36 :. e37 :. e6) T2 b63 b64, out (Z :. e38 :. e39 :. e40) T2 b66 b67)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e17 :. e15 :. e5) b26, out (Z :. e38 :. e39 :. e40) b68)
  execute map (\(T3 x0 x1 x2) -> exp (x0 - x1) * x2, in (Z :. e38 :. e39 :. e40) T3 b66 b67 b68, out (Z :. e38 :. e39 :. e40) b65)
  b69: [Float]¹ = alloc Float[Z :. e38 :. e39 :. e40 :. e6]
  execute backpermute (\(T4 x0 x1 x2 _) -> T3 x0 x1 x2, in (Z :. e38 :. e39 :. e40) b65, out (Z :. e38 :. e39 :. e40 :. e6) b69)
  b70: [Float]¹ = alloc Float[Z :. e7 :. e39 :. e5 :. e6]
  execute backpermute (\(T4 x0 _ x1 x2) -> T3 x0 x1 x2, in (Z :. e7 :. e5 :. e6) b60, out (Z :. e7 :. e39 :. e5 :. e6) b70)
  e41: Int = compute min e38 e7
  e42: Int = compute min e40 e5
  b71: [Float]¹ = alloc Float[Z :. e41 :. e39 :. e42 :. e6]
  b72: [Float]¹ = alloc Float[Z :. e41 :. e39 :. e42 :. e6]
  b73: [Float]¹ = alloc Float[Z :. e41 :. e39 :. e42 :. e6]
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e38 :. e39 :. e40 :. e6) b69, out (Z :. e41 :. e39 :. e42 :. e6) b72)
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e7 :. e39 :. e5 :. e6) b70, out (Z :. e41 :. e39 :. e42 :. e6) b73)
  execute map (\(x0, x1) -> x0 * x1, in (Z :. e41 :. e39 :. e42 :. e6) (b72, b73), out (Z :. e41 :. e39 :. e42 :. e6) b71)
  b74: [Float]¹ = alloc Float[Z :. e41 :. e39 :. e6 :. e42]
  execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x3 x2, in (Z :. e41 :. e39 :. e42 :. e6) b71, out (Z :. e41 :. e39 :. e6 :. e42) b74)
  b75: [Float]¹ = alloc Float[Z :. e41 :. e39 :. e6]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e41 :. e39 :. e6 :. e42) b74, out (Z :. e41 :. e39 :. e6) b75)
  e43: Int = compute min e33 e41
  e44: Int = compute min e34 e39
  e45: Int = compute min e35 e6
  b76: [Float]¹ = alloc Float[Z :. e43 :. e44 :. e45]
  b77: [Float]¹ = alloc Float[Z :. e43 :. e44 :. e45]
  b78: [Float]¹ = alloc Float[Z :. e43 :. e44 :. e45]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e33 :. e34 :. e35) b54, out (Z :. e43 :. e44 :. e45) b77)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e41 :. e39 :. e6) b75, out (Z :. e43 :. e44 :. e45) b78)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e43 :. e44 :. e45) (b77, b78), out (Z :. e43 :. e44 :. e45) b76)
  b79: [Float]¹ = alloc Float[Z :. e27 :. e28 :. e6]
  execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e27 :. e28) b40, out (Z :. e27 :. e28 :. e6) b79)
  e46: Int = compute min e43 e27
  e47: Int = compute min e44 e28
  e48: Int = compute min e45 e6
  b80: [Float]¹ = alloc Float[Z :. e46 :. e47 :. e48]
  b81: [Float]¹ = alloc Float[Z :. e46 :. e47 :. e48]
  b82: [Float]¹ = alloc Float[Z :. e46 :. e47 :. e48]
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e43 :. e44 :. e45) b76, out (Z :. e46 :. e47 :. e48) b81)
  execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e27 :. e28 :. e6) b79, out (Z :. e46 :. e47 :. e48) b82)
  execute map (\(x0, x1) -> x0 / x1, in (Z :. e46 :. e47 :. e48) (b81, b82), out (Z :. e46 :. e47 :. e48) b80)
  return (T4 e46 e47 e48 b80)


PartitionedAcc:

\T3 (T1 (b0: [Int])) (T1 (b1: [Int])) (T1 (b2: [Int])) ->
  e0: Int = compute (b0 !! 0)
  e1: Int = compute (b1 !! 0)
  e2: Int = compute (b0 !! 0)
  e3: Int = compute (b1 !! 0)
  b3: [Float]¹ = alloc Float[Z :. e0 :. e1]
  b4: [Float]¹ = alloc Float[Z :. e2 :. e3]
  b5: [Float]¹ = alloc Float[Z :. e2 :. e3]
  T3 (e4: Int) (e5: Int) (e6: Int) = compute let x0 = e1 in (let x1 = let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1 in T2 (div e0 x1) x1, x0)
  T3 (e7: Int) (e8: Int) (e9: Int) = compute let x0 = e1 in (let x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1, x0)
  T2 (e10: Int) (e11: Int) = compute let x0 = e1 ; x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1
  T2 (e12: Int) (e13: Int) = compute let x0 = e1 ; x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1
  b6: [Float]¹ = alloc Float[Z :. e0 :. e1]
  T3 (e14: Int) (e15: Int) (e16: Int) = compute let x0 = e1 in (let x1 = min (let x1 = 4 * x0 in div (-1 + ((b2 !! 0) + x1)) x1) x0 in T2 (div e0 x1) x1, x0)
  execute generate (\_ -> 1.0, out (Z :. e0 :. e1) b3)
  execute generate (\_ -> 1.0, out (Z :. e2 :. e3) b4)
  b7: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
  b8: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
  b9: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
  b10: [Float]¹ = alloc Float[Z :. e10 :. e11]
  b11: [Float]¹ = alloc Float[Z :. e12 :. e13]
  b12: [Float]¹ = alloc Float[Z :. e14 :. e15 :. e16]
  b13: [Float]¹ = alloc Float[Z :. e14 :. e15 :. e16]
  b14: [Float]¹ = alloc Float[Z :. e5 :. e6]
  b15: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
  b16: [Float]¹ = alloc Float[Z :. e4 :. e6 :. e5]
  b17: [Float]¹ = alloc Float[Z :. e14 :. e15 :. e16 :. e5]
  b18: [Float]¹ = alloc Float[Z :. e4 :. e15 :. e6 :. e5]
  e17: Int = compute min e14 e4
  e18: Int = compute min e16 e6
  e19: Int = compute min e11 e15
  b19: [Float]¹ = alloc Float[Z :. e12 :. e13 :. e6]
  b20: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e6]
  e20: Int = compute min e12 e10
  e21: Int = compute min e13 e11
  e22: Int = compute min e6 e9
  b21: [Float]¹ = alloc Float[Z :. e5 :. e6]
  b22: [Float]¹ = alloc Float[Z :. e7 :. e5 :. e6]
  e23: Int = compute min e6 e5
  
Fused (execute generate (\(T2 x0 x1) -> (b4 !! toIndex (T2 e2 e3) (T2 x0 x1)), out (Z :. e2 :. e3) b5), execute backpermute (\(T3 x0 x1 x2) -> fromIndex (T2 e2 e3) (toIndex (let x3 = e1 in (let x4 = let x4 = 4 * x3 in div (-1 + ((b2 !! 0) + x4)) x4 in T2 (div e0 x4) x4, x3)) (T3 x0 x1 x2)), in (Z :. e2 :. e3) b5, out (Z :. e4 :. e5 :. e6) b7)
  execute generate (\_ -> -3.4028235e38, out (Z :. e10 :. e11) b10)
  execute generate (\_ -> 0.0, out (Z :. e12 :. e13) b11)
  
Fused (execute generate (\(T2 x0 x1) -> (b3 !! toIndex (T2 e0 e1) (T2 x0 x1)), out (Z :. e0 :. e1) b6), execute backpermute (\(T3 x0 x1 x2) -> fromIndex (T2 e0 e1) (toIndex (let x3 = e1 in (let x4 = min (let x4 = 4 * x3 in div (-1 + ((b2 !! 0) + x4)) x4) x3 in T2 (div e0 x4) x4, x3)) (T3 x0 x1 x2)), in (Z :. e0 :. e1) b6, out (Z :. e14 :. e15 :. e16) b12)
  b23: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e18 :. e5]
  b24: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e18 :. e5]
  b25: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e18 :. e5]
  b26: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5 :. e18]
  b27: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5]
  b28: [Float]¹ = alloc Float[Z :. e17 :. e15]
  b29: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5]
  b30: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e5]
  b31: [Float]¹ = alloc Float[Z :. e17 :. e15]
  e24: Int = compute min e10 e17
  e25: Int = compute min e11 e19
  b32: [Float]¹ = alloc Float[Z :. e20 :. e21 :. e6]
  b33: [Float]¹ = alloc Float[Z :. e20 :. e21 :. e6]
  e26: Int = compute min e21 e19
  b34: [Float]¹ = alloc Float[Z :. e17 :. e15 :. e6]
  e27: Int = compute min e15 e19
  e28: Int = compute min e23 e5
  e29: Int = compute min e22 e6
  execute generate (\(T3 x0 x1 x2) -> (b7 !! toIndex (T3 e4 e5 e6) (T3 x0 x1 x2)), out (Z :. e4 :. e5 :. e6) b8)
  
Fused (execute backpermute (\(T2 x0 x1) -> T3 0 x0 x1, in (Z :. e4 :. e5 :. e6) b8, out (Z :. e5 :. e6) b14), 
Fused (execute backpermute (\((_, x0), x1) -> T2 x0 x1, in (Z :. e5 :. e6) b14, out (Z :. e4 :. e5 :. e6) b15), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x2 x1, in (Z :. e4 :. e5 :. e6) b15, out (Z :. e4 :. e6 :. e5) b16), 
Fused (execute backpermute (\(T4 x0 _ x1 x2) -> T3 x0 x1 x2, in (Z :. e4 :. e6 :. e5) b16, out (Z :. e4 :. e15 :. e6 :. e5) b18), 
Fused (execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e4 :. e15 :. e6 :. e5) b18, out (Z :. e17 :. e15 :. e18 :. e5) b25), 
Fused (execute generate (\(T3 x0 x1 x2) -> (b12 !! toIndex (T3 e14 e15 e16) (T3 x0 x1 x2)), out (Z :. e14 :. e15 :. e16) b13), 
Fused (execute backpermute (\(T4 x0 x1 x2 _) -> T3 x0 x1 x2, in (Z :. e14 :. e15 :. e16) b13, out (Z :. e14 :. e15 :. e16 :. e5) b17), 
Fused (execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e14 :. e15 :. e16 :. e5) b17, out (Z :. e17 :. e15 :. e18 :. e5) b24), 
Fused (execute map (\(x0, x1) -> x0 * x1, in (Z :. e17 :. e15 :. e18 :. e5) (b24, b25), out (Z :. e17 :. e15 :. e18 :. e5) b23), execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x3 x2, in (Z :. e17 :. e15 :. e18 :. e5) b23, out (Z :. e17 :. e15 :. e5 :. e18) b26)
  b35: [Float]¹ = alloc Float[Z :. e24 :. e19]
  b36: [Float]¹ = alloc Float[Z :. e24 :. e19]
  b37: [Float]¹ = alloc Float[Z :. e24 :. e19]
  e30: Int = compute min e10 e24
  e31: Int = compute min e25 e13
  b38: [Float]¹ = alloc Float[Z :. e24 :. e19 :. e6]
  e32: Int = compute min e20 e24
  e33: Int = compute min e26 e8
  b39: [Float]¹ = alloc Float[Z :. e24 :. e19 :. e6]
  e34: Int = compute min e17 e24
  e35: Int = compute min e27 e15
  e36: Int = compute min e29 e6
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e17 :. e15 :. e5 :. e18) b26, out (Z :. e17 :. e15 :. e5) b27)
  execute fold-2 (\x0 x1 -> max x0 x1, in (Z :. e17 :. e15 :. e5) b27, out (Z :. e17 :. e15) b28)
  b40: [Float]¹ = alloc Float[Z :. e30 :. e25]
  b41: [Float]¹ = alloc Float[Z :. e30 :. e25]
  e37: Int = compute min e30 e12
  e38: Int = compute min e31 e15
  b42: [Float]¹ = alloc Float[Z :. e32 :. e26 :. e6]
  b43: [Float]¹ = alloc Float[Z :. e32 :. e26 :. e6]
  b44: [Float]¹ = alloc Float[Z :. e32 :. e26 :. e6]
  e39: Int = compute min e32 e7
  b45: [Float]¹ = alloc Float[Z :. e34 :. e27 :. e6]
  b46: [Float]¹ = alloc Float[Z :. e34 :. e27 :. e6]
  e40: Int = compute min e34 e17
  b47: [Float]¹ = alloc Float[Z :. e7 :. e35 :. e5 :. e6]
  e41: Int = compute min e33 e35
  
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e17 :. e15) b28, out (Z :. e24 :. e19) b37), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e10 :. e11) b10, out (Z :. e24 :. e19) b36), execute map (\(x0, x1) -> max x0 x1, in (Z :. e24 :. e19) (b36, b37), out (Z :. e24 :. e19) b35)
  
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e17 :. e15) b28, out (Z :. e17 :. e15 :. e5) b29), execute map (\(x0, x1) -> exp (x1 - x0), in (Z :. e17 :. e15 :. e5) (b29, b27), out (Z :. e17 :. e15 :. e5) b30)
  b48: [Float]¹ = alloc Float[Z :. e37 :. e31]
  b49: [Float]¹ = alloc Float[Z :. e37 :. e31]
  b50: [Float]¹ = alloc Float[Z :. e37 :. e31]
  e42: Int = compute min e37 e17
  e43: Int = compute min e38 e15
  b51: [Float]¹ = alloc Float[Z :. e39 :. e33 :. e22]
  b52: [Float]¹ = alloc Float[Z :. e39 :. e33 :. e22]
  b53: [Float]¹ = alloc Float[Z :. e39 :. e33 :. e22]
  b54: [Float]¹ = alloc Float[Z :. e39 :. e33 :. e22]
  b55: [Float]¹ = alloc Float[Z :. e39 :. e33 :. e22]
  b56: [Float]¹ = alloc Float[Z :. e40 :. e35 :. e23]
  b57: [Float]¹ = alloc Float[Z :. e40 :. e35 :. e23]
  b58: [Float]¹ = alloc Float[Z :. e40 :. e35 :. e23]
  b59: [Float]¹ = alloc Float[Z :. e40 :. e35 :. e23]
  b60: [Float]¹ = alloc Float[Z :. e40 :. e35 :. e23 :. e6]
  e44: Int = compute min e40 e7
  b61: [Float]¹ = alloc Float[Z :. e42 :. e38]
  b62: [Float]¹ = alloc Float[Z :. e42 :. e38]
  b63: [Float]¹ = alloc Float[Z :. e42 :. e38]
  b64: [Float]¹ = alloc Float[Z :. e42 :. e38]
  e45: Int = compute min e42 e17
  b65: [Float]¹ = alloc Float[Z :. e44 :. e35 :. e28 :. e6]
  b66: [Float]¹ = alloc Float[Z :. e44 :. e35 :. e28 :. e6]
  b67: [Float]¹ = alloc Float[Z :. e44 :. e35 :. e28 :. e6]
  b68: [Float]¹ = alloc Float[Z :. e44 :. e35 :. e6 :. e28]
  b69: [Float]¹ = alloc Float[Z :. e44 :. e35 :. e6]
  e46: Int = compute min e39 e44
  e47: Int = compute min e41 e43
  
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e17 :. e15 :. e5) b30, out (Z :. e40 :. e35 :. e23) b59), 
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e24 :. e19) b35, out (Z :. e24 :. e19 :. e6) b39), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e24 :. e19 :. e6) b39, out (Z :. e34 :. e27 :. e6) b46), 
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1, in (Z :. e17 :. e15) b28, out (Z :. e17 :. e15 :. e6) b34), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e17 :. e15 :. e6) b34, out (Z :. e34 :. e27 :. e6) b45), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2, in (Z :. e34 :. e27 :. e6) T2 b45 b46, out (Z :. e40 :. e35 :. e23) T2 b57 b58), 
Fused (execute map (\(T3 x0 x1 x2) -> exp (x0 - x1) * x2, in (Z :. e40 :. e35 :. e23) T3 b57 b58 b59, out (Z :. e40 :. e35 :. e23) b56), 
Fused (execute backpermute (\(T4 x0 x1 x2 _) -> T3 x0 x1 x2, in (Z :. e40 :. e35 :. e23) b56, out (Z :. e40 :. e35 :. e23 :. e6) b60), 
Fused (execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e40 :. e35 :. e23 :. e6) b60, out (Z :. e44 :. e35 :. e28 :. e6) b66), 
Fused (execute backpermute (\(T2 x0 x1) -> T3 0 x0 x1, in (Z :. e4 :. e5 :. e6) b8, out (Z :. e5 :. e6) b21), 
Fused (execute backpermute (\((_, x0), x1) -> T2 x0 x1, in (Z :. e5 :. e6) b21, out (Z :. e7 :. e5 :. e6) b22), 
Fused (execute backpermute (\(T4 x0 _ x1 x2) -> T3 x0 x1 x2, in (Z :. e7 :. e5 :. e6) b22, out (Z :. e7 :. e35 :. e5 :. e6) b47), 
Fused (execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x2 x3, in (Z :. e7 :. e35 :. e5 :. e6) b47, out (Z :. e44 :. e35 :. e28 :. e6) b67), 
Fused (execute map (\(x0, x1) -> x0 * x1, in (Z :. e44 :. e35 :. e28 :. e6) (b66, b67), out (Z :. e44 :. e35 :. e28 :. e6) b65), execute backpermute (\(T4 x0 x1 x2 x3) -> T4 x0 x1 x3 x2, in (Z :. e44 :. e35 :. e28 :. e6) b65, out (Z :. e44 :. e35 :. e6 :. e28) b68)
  b70: [Float]¹ = alloc Float[Z :. e45 :. e43]
  b71: [Float]¹ = alloc Float[Z :. e45 :. e43]
  b72: [Float]¹ = alloc Float[Z :. e45 :. e43]
  b73: [Float]¹ = alloc Float[Z :. e45 :. e43]
  b74: [Float]¹ = alloc Float[Z :. e45 :. e43]
  b75: [Float]¹ = alloc Float[Z :. e45 :. e43]
  b76: [Float]¹ = alloc Float[Z :. e46 :. e41 :. e29]
  b77: [Float]¹ = alloc Float[Z :. e46 :. e41 :. e29]
  b78: [Float]¹ = alloc Float[Z :. e46 :. e41 :. e29]
  b79: [Float]¹ = alloc Float[Z :. e45 :. e43 :. e6]
  e48: Int = compute min e46 e45
  b80: [Float]¹ = alloc Float[Z :. e48 :. e47 :. e36]
  b81: [Float]¹ = alloc Float[Z :. e48 :. e47 :. e36]
  b82: [Float]¹ = alloc Float[Z :. e48 :. e47 :. e36]
  
Fused (execute fold-2 (\x0 x1 -> x0 + x1,                                                         in (Z :. e44 :. e35 :. e6 :. e28) b68,                  out (Z :. e44 :. e35 :. e6)     b69), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e44 :. e35 :. e6)        b69,                  out (Z :. e46 :. e41 :. e29)    b78), 
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1,                                            in (Z :. e24 :. e19)              b35,                  out (Z :. e24 :. e19 :. e6)     b38), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e24 :. e19 :. e6)        b38,                  out (Z :. e32 :. e26 :. e6)     b44), 
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1,                                            in (Z :. e10 :. e11)              b10,                  out (Z :. e10 :. e11 :. e6)     b20), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e10 :. e11 :. e6)        b20,                  out (Z :. e20 :. e21 :. e6)     b33), 
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1,                                            in (Z :. e12 :. e13)              b11,                  out (Z :. e12 :. e13 :. e6)     b19), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e12 :. e13 :. e6)        b19,                  out (Z :. e20 :. e21 :. e6)     b32), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e20 :. e21 :. e6)        b32 b33,              out (Z :. e32 :. e26 :. e6)     b42 b43), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e32 :. e26 :. e6)        b42 b43, b44),        out (Z :. e39 :. e33 :. e22)    b52 b53 b54), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e17 :. e15)              b28,                  out (Z :. e42 :. e38)           b64), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e12 :. e13)              b11,                  out (Z :. e37 :. e31)           b50), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e24 :. e19)              b35,                  out (Z :. e30 :. e25)           b41), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e10 :. e11)              b10,                  out (Z :. e30 :. e25)           b40), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e30 :. e25)              b40 b41,              out (Z :. e37 :. e31)           b48 b49), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e37 :. e31)              b48 b49 b50,          out (Z :. e42 :. e38)           b61 b62 b63), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e42 :. e38)              b61 b62 b63, b64),    out (Z :. e45 :. e43)           b71 b72 b73 b74), 
Fused (execute fold-2 (\x0 x1 -> x0 + x1,                                                         in (Z :. e17 :. e15 :. e5)        b30,                  out (Z :. e17 :. e15)           b31), 
Fused (execute backpermute (\(T2 x0 x1) -> T2 x0 x1,                                              in (Z :. e17 :. e15)              b31,                  out (Z :. e45 :. e43)           b75), 
Fused (execute map (\(T3 (T2 (T2 x0 x1) x2) x3 x4) -> exp (x0 - x1) * x2 + exp (x3 - x1) * x4,    in (Z :. e45 :. e43)              b71 b72 b73 b74 b75,  out (Z :. e45 :. e43)           b70), 
Fused (execute backpermute (\(T3 x0 x1 _) -> T2 x0 x1,                                            in (Z :. e45 :. e43)              b70,                  out (Z :. e45 :. e43 :. e6)     b79), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e45 :. e43 :. e6)        b79,                  out (Z :. e48 :. e47 :. e36)    b82), 
Fused (execute generate (\_ -> 0.0,                                                                                                                       out (Z :. e7 :. e8 :. e9)       b9), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e7 :. e8 :. e9)          b9,                   out (Z :. e39 :. e33 :. e22)    b55), 
Fused (execute map (\(T3 (T2 x0 x1) x2 x3) -> x0 * exp (x1 - x2) * x3,                            in (Z :. e39 :. e33 :. e22)       b52 b53 b54 b55,      out (Z :. e39 :. e33 :. e22)    b51), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e39 :. e33 :. e22)       b51,                  out (Z :. e46 :. e41 :. e29)    b77), 
Fused (execute map (\(x0, x1) -> x0 + x1,                                                         in (Z :. e46 :. e41 :. e29)       b77 b78,              out (Z :. e46 :. e41 :. e29)    b76), 
Fused (execute backpermute (\(T3 x0 x1 x2) -> T3 x0 x1 x2,                                        in (Z :. e46 :. e41 :. e29)       b76,                  out (Z :. e48 :. e47 :. e36)    b81), 
       execute map (\(x0, x1) -> x0 / x1,                                                         in (Z :. e48 :. e47 :. e36)       b81 b82,              out (Z :. e48 :. e47 :. e36)    b80)
  return (T4 e48 e47 e36 b80)

SLV'd PartitionedAcc:

