/* Manually implement tridag_v in C (for float and large only) */

use Array: all;
use Math: all;
use StdIO: all;
use Benchmarking: all;

#ifdef DOUBLE
  #define REAL double
  #define tor tod
  #define VEC 4
#else
  #define REAL float
  #define tor tof
  #define VEC 8
#endif

/**
 * Initializes VarX as outer product of VarX1 and VarX2.
 */
REAL[NUM_Y], REAL[NUM_X] updateParams(REAL[NUM_X] X, REAL[NUM_Y] Y, REAL t)
{
  VarX1 = {[j] -> exp(tor(2) * Y[j] - NU * NU * t)};
  VarX2 = {[i] -> pow(X[i], tor(2) * BETA)};

  return (VarX1, VarX2);
}

/**
 * Initializes indX, indY, X, Y, Dxx, Dyy
 */
inline
int, int, REAL[NUM_X], REAL[NUM_Y], REAL[3], REAL[3] initGrid()
{
  stdX = tor(20) * ALPHA * S0 * sqrt(T);
  dx = stdX / tor(NUM_X);
  indX = toi(S0 / dx);
  X = {[i] -> tor(i) * dx - tor(indX) * dx + S0 | [i] < [NUM_X]};
  Dxx = [tor(1) / (dx * dx), tor(-2) / (dx * dx), tor(1) / (dx * dx)];

  stdY = tor(10) * NU * sqrt(T);
  dy = stdY / tor(NUM_Y);
  indY = NUM_Y / 2;
  Dyy = [tor(1) / (dy * dy), tor(-2) / (dy * dy), tor(1) / (dy * dy)];

  Y = {[i] -> tor(i) * dy - tor(indY) * dy + log(ALPHA)
            | [i] < [NUM_Y]};

  return (indX, indY, X, Y, Dxx, Dyy);
}

/* a, b, c are constants signifying a Toeplitz system. This solves
   the Toeplitz system on each column of y. */
inline
REAL[NUM_Y, NUM_X] toeplitz(REAL a, REAL b, REAL c, REAL[NUM_Y, NUM_X] y)
{
  n = NUM_Y;
  gamma = with {}: genarray([NUM_Y], tor(0));

  /* This is the modified Thomas method from Numerical Mathematics.
   * Note that the non-zeroes in a row are a, b, c in this application,
   * and b, a, c in Numerical Methods. */
  gamma[0] = tor(1) / b;
  y[0] = gamma[0] * y[0];

  gamma[1] = tor(1) / b;
  y[1] = gamma[1] * (y[1] - a * y[0]);
  for (i = 2; i < n; i++) {
      gamma[i] = tor(1) / (b - a * gamma[i - 1] * c);
      y[i] = gamma[i] * (y[i] - a * y[i - 1]);
  }

  for (i = n - 2; i >= 1; i--) {
      y[i] = y[i] - gamma[i] * c * y[i + 1];
  }

  return y;
}

/* The assembly generated from this is pretty shitty. See
   https://godbolt.org/z/5v78zbdsW for what it should look like. */
external REAL[NUM_X, VEC] tridag_v(REAL[NUM_X, VEC] a, REAL[NUM_X, VEC] b, 
                                   REAL[NUM_X, VEC] c, REAL[NUM_X, VEC] y);
  #pragma linkobj "./tridag_v.o"
  #pragma linksign [4, 1, 2, 3, 4]
  #pragma linkname "tridag_v"

noinline
REAL[VEC, NUM_X] implicit_x(REAL[VEC] VarX1, REAL[NUM_X] VarX2, REAL[3] Dxx, 
                       REAL[VEC, NUM_X] uu)
{
  uu_t = transpose(uu);
  a = {[j] -> VarX1 * VarX2[j]          | [1] <= [j] < [NUM_X - 1];
       [j] -> genarray([VEC], tor(0))   | [NUM_X - 1] <= [j] < [NUM_X]}; 
  res = tridag_v(a, tor(1) - tor(2) * a, a, uu_t); 
  return transpose(res);
}

inline
REAL[NUM_Y, NUM_X] rollback(REAL dtInv, REAL[3] Dxx,
                            REAL[NUM_X] X, REAL[NUM_Y] Y, 
                            REAL[NUM_Y] VarX1, REAL[NUM_X] VarX2,
                            REAL[3] Dyy, REAL VarY,
                            REAL[NUM_Y, NUM_X] ResultE)
{
  /* explicit y */
  V = {[j, i] -> VarY / tor(4) * (ResultE[j - 1, i] * Dyy[0] +
                                  ResultE[j    , i] * Dyy[1] +
                                  ResultE[j + 1, i] * Dyy[2])
               | [1, 0] <= [j, i] < [NUM_Y - 1, NUM_X];
       [j, i] -> tor(0)
               | [NUM_Y - 1, 0] <= [j, i] < [NUM_Y, NUM_X]
      };

  /* explicit x */
  U = {[j, i] -> dtInv * ResultE[j, i]
               | [0, 0] <= [j, i] < [NUM_Y, 1];
       [j, i] -> dtInv * ResultE[j, i] + VarX1[j] * VarX2[i] / tor(4) * (
                            ResultE[j, i - 1] * Dxx[0] +
                            ResultE[j, i    ] * Dxx[1] +
                            ResultE[j, i + 1] * Dxx[2])
               | [0, 1] <= [j, i] < [NUM_Y, NUM_X - 1];
       [j, i] -> dtInv * ResultE[j, i]
               | [0, NUM_X - 1] <= [j, i] < [NUM_Y, NUM_X]
       };

  U = {[j, i] -> U[j, i] + tor(2) * V[j, i]};

  /* implicit x */
  VarX1 *= Dxx[0] / tor(-4) / dtInv; // Scale solution by dtInv
  VarX1p = reshape([NUM_Y / VEC, VEC], VarX1);
  Up = reshape([NUM_Y / VEC, VEC, NUM_X], U);
  Up = {[j] -> implicit_x(VarX1p[j], VarX2, Dxx, Up[j])};
  U = reshape([NUM_Y, NUM_X], Up);

  /* implicit y */
  V = U - V;
  a = VarY / tor(-4) * Dyy[0];
  ResultE = toeplitz(a, dtInv - tor(2) * a, a, V);

  return ResultE;
}

inline
REAL value(REAL strike, int indX, int indY,
           REAL[NUM_X] X, REAL[NUM_Y] Y,
           REAL[3] Dxx, REAL[3] Dyy)
{
  VarX1, VarX2 = updateParams(X, Y, tor(NUM_T - 2) * T / tor(NUM_T - 1));
  ResultE = {[j, i] -> max(X[i] - strike, tor(0)) | [j, i] < [NUM_Y, NUM_X]};

  for (t = NUM_T - 2; t >= 0; t--) {
    ResultE = rollback(tor(NUM_T - 1) / T, Dxx, X, Y, VarX1, VarX2,
                       Dyy, NU * NU, ResultE);
    VarX2 *= exp(NU * NU * T / tor(NUM_T - 1));
  }

  return ResultE[indY, indX];
}

int main()
{
  fprintf(stdout, "\n// SaC Volatility Calibration Benchmark:\n");

  itime = getInterval("time", 1);
  start(itime);
  indX, indY, X, Y, Dxx, Dyy = initGrid();

  result = {[i] -> value(tor(i) / tor(1000), indX, indY, X, Y, Dxx, Dyy)
                 | [i] < [OUTER]};
  end(itime);
  print(result);

  time, unit = returnResultUnit(itime);
  printf("This took %f%s.\n", time, unit);

  return 0;
}
